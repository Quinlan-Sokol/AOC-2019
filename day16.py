from itertools import cycle
from itertools import chain
from itertools import islice

lst = list(map(int, list("59766832516471105169175836985633322599038555617788874561522148661927081324685821180654682056538815716097295567894852186929107230155154324411726945819817338647442140954601202408433492208282774032110720183977662097053534778395687521636381457489415906710702497357756337246719713103659349031567298436163261681422438462663511427616685223080744010014937551976673341714897682634253850270219462445161703240957568807600494579282412972591613629025720312652350445062631757413159623885481128914333982571503540357043736821931054029305931122179293220911720263006705242490442826574028623201238659548887822088996956559517179003476743001815465428992906356931239533104")))
base = [0, 1, 0, -1]


def genPattern(n, l):
    arr = cycle(list(chain.from_iterable([[x] * n for x in base])))
    next(arr)
    return islice(arr, l)


for k in range(100):
    print(k)
    out = lst[:]
    for i in range(len(lst)):
        out[i] = int(str(sum([p * x for p, x in zip(genPattern(i + 1, len(lst)), lst)]))[-1])

    lst = out[:]

print("".join(map(str, lst))[:8])

